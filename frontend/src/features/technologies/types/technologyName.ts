export enum TechnologyName {
  REACTJS = 'React.js', // Core library for building the app
  CSS = 'CSS',
  HTML = 'HTML',
  JAVASCRIPT = 'JavaScript',
  POSTGRESQL = 'PostgreSQL',
  NESTJS = 'NestJS', // Backend framework
  YARN_BERRY = 'Yarn Berry', // Package manager
  NPM = 'npm', // Package manager
  TYPESCRIPT = 'TypeScript', // Strongly typed JavaScript
  JAVASCRIPT_ES6_PLUS = 'JavaScript (ES6+)', // Modern JS content with non-breaking space
  CREATE_REACT_APP = 'Create React App', // React setup tool
  VITE = 'Vite', // Modern build tool
  REACT_ROUTER = 'React Router', // SPA navigation and routing
  ESNEXT_ESM = 'ESNext + ESM',
  AXIOS = 'Axios', // API request library
  FETCH = 'Fetch', // API request method
  REACT_QUERY = 'React Query', // Data fetching and caching
  REDUX = 'Redux', // State management library
  ZUSTAND = 'Zustand', // State management library
  RECOIL = 'Recoil', // State management library
  STYLED_COMPONENTS = 'Styled Components', // CSS-in-JS styling tool
  CSS_MODULES = 'CSS Modules', // Modular CSS
  TAILWIND_CSS = 'Tailwind CSS', // Utility-first CSS framework
  WEBPACK = 'Webpack', // Module bundler
  REACT_TESTING_LIBRARY = 'React Testing Library', // React testing tool
  JEST = 'Jest', // Testing framework Jest
  VITEST = 'Vitest', // Testing framework: Vitest
  ESLINT = 'ESLint', // Code linting tool
  KAFKA = 'Kafka',
  PRETTIER = 'Prettier', // Code formatting tool
  STORYBOOK = 'Storybook', // UI component tool
  NODEJS = 'Node.js', // Backend runtime environment
  EXPRESS = 'Express', // Web framework for Node.js
  MICROSERVICES = 'Microservices', // Architectural pattern
  RABBITMQ = 'RabbitMQ', // Message broker
  WEBSOCKET = 'WebSocket', // Communication protocol
  DOCKER = 'Docker', // Containerization tool
  KUBERNETES = 'Kubernetes', // Container orchestration
  JENKINS = 'Jenkins', // Continuous integration tool
  SOLID = 'SOLID', // Design principles
  HEXAGONAL_ARCHITECTURE = 'Hexagonal Architecture', // Software design pattern
  SAGA = 'SAGA', // Distributed transaction pattern
}
